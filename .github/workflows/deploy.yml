name: Deploy Infrastructure

on:
  push:
    branches:
      - main

env:
  PYTHON_VERSION: '3.10'
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  lint:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r agents/requirements-worker.txt
          pip install flake8

      - name: Run flake8
        run: flake8 agents

  check-acr:
    runs-on: ubuntu-latest
    outputs:
      acr_exists: ${{ steps.detect.outputs.acr_exists }}
    steps:
      - name: Log in to Azure
        run: |
          az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
      - id: detect
        run: |
          if az acr show --name vextiracrdev >/dev/null 2>&1; then
            echo "acr_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "acr_exists=false" >> "$GITHUB_OUTPUT"
          fi

  # Build Docker images in parallel - no dependency on infrastructure
  build-images:
    needs: check-acr
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - image_tag: lightning-worker
            context: .
            file: ./agents/Dockerfile.lightning-worker
          - image_tag: conseil-agent
            context: .
            file: ./agents/conseil/Dockerfile
          - image_tag: integrated-ui
            context: .
            file: ./ui/integrated_app/Dockerfile
          - image_tag: voice-ws
            context: ./agents/voice-agent/websocket-server
            file: ./agents/voice-agent/websocket-server/Dockerfile
          - image_tag: voice-webapp
            context: ./agents/voice-agent/webapp
            file: ./agents/voice-agent/webapp/Dockerfile
          - image_tag: context-hub
            context: ./context-hub
            file: ./context-hub/Dockerfile
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Azure Container Registry
        run: |
          az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
          az acr login --name vextiracrdev
          
      - name: Build and push ${{ matrix.image_tag }} image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          push: true
          tags: |
            vextiracrdev.azurecr.io/${{ matrix.image_tag }}:${{ github.sha }}
            vextiracrdev.azurecr.io/${{ matrix.image_tag }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Deploy placeholder infrastructure if ACR does not exist
  deploy-baseline:
    needs: check-acr
    runs-on: ubuntu-latest
    if: needs.check-acr.outputs.acr_exists == 'false'
    outputs:
      pulumi-configured: ${{ steps.setup.outputs.configured }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Cache Pulumi dependencies
        uses: actions/cache@v3
        with:
          path: |
            infra/.venv
            azure-function/.python_packages
          key: ${{ runner.os }}-pulumi-${{ hashFiles('infra/requirements.txt', 'azure-function/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pulumi-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r infra/requirements.txt
          
      - name: Install function dependencies
        run: |
          pip install -r azure-function/requirements.txt \
            --target azure-function/.python_packages \
            --platform manylinux2014_x86_64 \
            --implementation cp \
            --python-version ${{ env.PYTHON_VERSION }} \
            --only-binary=:all: \
            --upgrade
            
      - id: setup
        name: Setup Pulumi stack and config
        run: |
          cd infra
          pulumi stack select dev --create --non-interactive
          
          # Set all config at once
          pulumi config set domain "vextir.com"
          pulumi config set aadClientId "$ARM_CLIENT_ID" --secret
          pulumi config set aadClientSecret "$ARM_CLIENT_SECRET" --secret  
          pulumi config set aadTenantId "$ARM_TENANT_ID"
          pulumi config set openaiApiKey "${{ secrets.OPENAI_API_KEY }}" --secret
          pulumi config set twilioAccountSid "${{ secrets.TWILIO_ACCOUNT_SID }}" --secret
          pulumi config set twilioAuthToken "${{ secrets.TWILIO_AUTH_TOKEN }}" --secret
          
          # Use placeholder images initially - will be updated after build
          pulumi config set workerImage "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
          pulumi config set conseilImage "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
          pulumi config set uiImage "mcr.microsoft.com/azuredocs/aci-helloworld:latest"  
          pulumi config set voiceWsImage "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
          pulumi config set voiceWebappImage "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
          pulumi config set hubImage "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
          
          echo "configured=true" >> $GITHUB_OUTPUT
        env:
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          
      - name: Deploy baseline infrastructure
        run: |
          cd infra
          pulumi up --yes --skip-preview
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Final deployment with actual images
  deploy-with-images:
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python  
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Restore cached dependencies
        uses: actions/cache@v3
        with:
          path: |
            infra/.venv
            azure-function/.python_packages
          key: ${{ runner.os }}-pulumi-${{ hashFiles('infra/requirements.txt', 'azure-function/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pulumi-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r infra/requirements.txt
          
      - name: Update images and deploy
        run: |
          cd infra
          pulumi stack select dev --non-interactive
          
          # Re-set all required configuration (needed because config doesn't persist between jobs)
          pulumi config set domain "vextir.com"
          pulumi config set aadClientId "$ARM_CLIENT_ID" --secret
          pulumi config set aadClientSecret "$ARM_CLIENT_SECRET" --secret  
          pulumi config set aadTenantId "$ARM_TENANT_ID"
          pulumi config set openaiApiKey "${{ secrets.OPENAI_API_KEY }}" --secret
          pulumi config set twilioAccountSid "${{ secrets.TWILIO_ACCOUNT_SID }}" --secret
          pulumi config set twilioAuthToken "${{ secrets.TWILIO_AUTH_TOKEN }}" --secret
          
          # Update to real images
          pulumi config set workerImage "vextiracrdev.azurecr.io/lightning-worker:${{ github.sha }}"
          pulumi config set conseilImage "vextiracrdev.azurecr.io/conseil-agent:${{ github.sha }}"
          pulumi config set uiImage "vextiracrdev.azurecr.io/integrated-ui:${{ github.sha }}"
          pulumi config set voiceWsImage "vextiracrdev.azurecr.io/voice-ws:${{ github.sha }}"
          pulumi config set voiceWebappImage "vextiracrdev.azurecr.io/voice-webapp:${{ github.sha }}"
          pulumi config set hubImage "vextiracrdev.azurecr.io/context-hub:${{ github.sha }}"

          # Deploy with real images
          pulumi up --yes --skip-preview
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Activate Front Door endpoint
        run: |
          az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
          az account set --subscription $ARM_SUBSCRIPTION_ID
          az afd endpoint update \
            -g vextir-dev \
            --profile-name vextir-fd-dev \
            --endpoint-name vextir-ep-dev \
            --enabled-state Enabled
