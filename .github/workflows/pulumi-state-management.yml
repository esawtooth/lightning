name: Pulumi State Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'fix-integrity'
        type: choice
        options:
          - 'fix-integrity'
          - 'remove-resource'
          - 'export-state'
          - 'import-state'
          - 'full-refresh'
      stack:
        description: 'Pulumi stack (e.g., dev, staging, prod)'
        required: true
        default: 'dev'
        type: string
      resource_urn:
        description: 'Resource URN (for remove-resource action)'
        required: false
        type: string
      state_file:
        description: 'State file name (for import-state action)'
        required: false
        type: string

env:
  PYTHON_VERSION: '3.10'
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  manage-state:
    runs-on: ubuntu-latest
    name: Manage Pulumi State
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r infra/requirements.txt
          
      - name: Install Pulumi CLI
        uses: pulumi/actions@v4
        
      - name: Select Pulumi stack
        run: |
          cd infra
          pulumi stack select ${{ inputs.stack }} --non-interactive
          
      - name: Configure Pulumi stack
        run: |
          cd infra
          
          # Set all required configuration
          pulumi config set domain "vextir.com"
          pulumi config set aadClientId "$ARM_CLIENT_ID" --secret
          pulumi config set aadClientSecret "$ARM_CLIENT_SECRET" --secret  
          pulumi config set aadTenantId "$ARM_TENANT_ID"
          pulumi config set openaiApiKey "${{ secrets.OPENAI_API_KEY }}" --secret
          pulumi config set twilioAccountSid "${{ secrets.TWILIO_ACCOUNT_SID }}" --secret
          pulumi config set twilioAuthToken "${{ secrets.TWILIO_AUTH_TOKEN }}" --secret
          
          # Set image configurations
          pulumi config set workerImage "vextiracrdev.azurecr.io/lightning-worker:latest"
          pulumi config set conseilImage "vextiracrdev.azurecr.io/conseil-agent:latest"
          pulumi config set uiImage "vextiracrdev.azurecr.io/integrated-ui:latest"
          pulumi config set voiceWsImage "vextiracrdev.azurecr.io/voice-ws:latest"
          pulumi config set hubImage "vextiracrdev.azurecr.io/context-hub:latest"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: Create state backup
        run: |
          cd infra
          mkdir -p state-backups
          pulumi stack export --file state-backups/backup-${{ inputs.stack }}-$(date +%Y%m%d-%H%M%S).json
          echo "State backup created"
          
      - name: Fix integrity errors
        if: ${{ inputs.action == 'fix-integrity' }}
        run: |
          cd infra
          echo "Attempting to fix state integrity errors..."
          
          # First, try to identify the problematic resources
          echo "Current stack resources:"
          pulumi stack --show-urns || true
          
          # Try state repair
          echo "Running state repair..."
          pulumi state repair --yes || echo "State repair completed with warnings"
          
          # Then refresh with integrity checking disabled
          echo "Refreshing state with integrity checking disabled..."
          pulumi refresh --yes --disable-integrity-checking
          
          # Finally, attempt a normal update
          echo "Attempting deployment..."
          pulumi up --yes --skip-preview --disable-integrity-checking
          
      - name: Remove specific resource from state
        if: ${{ inputs.action == 'remove-resource' && inputs.resource_urn != '' }}
        run: |
          cd infra
          echo "Removing resource from state: ${{ inputs.resource_urn }}"
          
          # Remove the resource
          pulumi state delete "${{ inputs.resource_urn }}" --yes
          
          # Refresh state
          pulumi refresh --yes
          
      - name: Export state
        if: ${{ inputs.action == 'export-state' }}
        run: |
          cd infra
          EXPORT_FILE="state-export-${{ inputs.stack }}-$(date +%Y%m%d-%H%M%S).json"
          pulumi stack export --file $EXPORT_FILE
          
          echo "State exported to: $EXPORT_FILE"
          echo "export_file=$EXPORT_FILE" >> $GITHUB_ENV
          
      - name: Import state
        if: ${{ inputs.action == 'import-state' && inputs.state_file != '' }}
        run: |
          cd infra
          
          # Download the state file if it's an artifact
          if [[ "${{ inputs.state_file }}" == http* ]]; then
            wget -O imported-state.json "${{ inputs.state_file }}"
            STATE_FILE="imported-state.json"
          else
            STATE_FILE="${{ inputs.state_file }}"
          fi
          
          echo "Importing state from: $STATE_FILE"
          pulumi stack import --file $STATE_FILE
          
          # Refresh after import
          pulumi refresh --yes
          
      - name: Full refresh and repair
        if: ${{ inputs.action == 'full-refresh' }}
        run: |
          cd infra
          echo "Performing full state refresh and repair..."
          
          # List current resources
          echo "Current resources:"
          pulumi stack --show-urns
          
          # Export current state
          pulumi stack export --file state-before-refresh.json
          
          # Try to repair state
          pulumi state repair --yes || true
          
          # Refresh with various options
          echo "Attempting refresh with integrity checking disabled..."
          pulumi refresh --yes --disable-integrity-checking || {
            echo "Refresh failed, trying with --skip-preview..."
            pulumi refresh --yes --skip-preview --disable-integrity-checking || {
              echo "Still failing, attempting manual fixes..."
              
              # Common fixes for Container Apps migration
              echo "Checking for orphaned ACI references..."
              pulumi stack --show-urns | grep -i containerinstance || true
              
              # Try to continue anyway
              echo "Attempting to proceed with deployment despite errors..."
              pulumi up --yes --skip-preview --disable-integrity-checking --continue-on-error || true
            }
          }
          
      - name: Validate state
        if: always()
        run: |
          cd infra
          echo "Validating current state..."
          
          # Show current configuration
          echo "Current configuration:"
          pulumi config
          
          # Show stack outputs
          echo "Stack outputs:"
          pulumi stack output --json || echo "No outputs available"
          
          # List resources
          echo "Current resources in state:"
          pulumi stack --show-urns || echo "Unable to list resources"
          
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: pulumi-state-artifacts-${{ github.run_id }}
          path: |
            infra/state-backups/
            infra/state-*.json
            infra/Pulumi.${{ inputs.stack }}.yaml
          retention-days: 30
          
      - name: Generate summary
        if: always()
        run: |
          echo "## Pulumi State Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: ${{ inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Stack**: ${{ inputs.stack }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.action }}" == "export-state" && -n "${{ env.export_file }}" ]]; then
            echo "### Exported State" >> $GITHUB_STEP_SUMMARY
            echo "State has been exported and saved as an artifact: ${{ env.export_file }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Troubleshooting Tips" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "If you're seeing integrity errors after Container Apps migration:" >> $GITHUB_STEP_SUMMARY
          echo "1. Use 'fix-integrity' action first" >> $GITHUB_STEP_SUMMARY
          echo "2. If specific resources are problematic, use 'remove-resource' with the URN" >> $GITHUB_STEP_SUMMARY
          echo "3. As a last resort, export state, manually edit, and import back" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Common problematic URNs after ACI to Container Apps migration:" >> $GITHUB_STEP_SUMMARY
          echo "- \`urn:pulumi:dev::vextir::azure-native:containerinstance:ContainerGroup::contexthub\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`urn:pulumi:dev::vextir::azure-native:containerinstance:ContainerGroup::chatui\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`urn:pulumi:dev::vextir::azure-native:containerinstance:ContainerGroup::voicews\`" >> $GITHUB_STEP_SUMMARY