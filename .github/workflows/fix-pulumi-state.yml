name: Fix Pulumi State

on:
  workflow_dispatch:
    inputs:
      stack:
        description: 'Pulumi stack to fix (e.g., dev, staging, prod)'
        required: true
        default: 'dev'
        type: string
      repair_method:
        description: 'Repair method to use'
        required: true
        default: 'disable-integrity-checking'
        type: choice
        options:
          - 'disable-integrity-checking'
          - 'state-repair'
          - 'both'

env:
  PYTHON_VERSION: '3.10'
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  fix-state:
    runs-on: ubuntu-latest
    name: Fix Pulumi State Integrity
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r infra/requirements.txt
          
      - name: Install Pulumi CLI
        uses: pulumi/actions@v4
        
      - name: Select Pulumi stack
        run: |
          cd infra
          pulumi stack select ${{ inputs.stack }} --non-interactive
          
      - name: Configure Pulumi stack
        run: |
          cd infra
          
          # Set all required configuration
          pulumi config set domain "vextir.com"
          pulumi config set aadClientId "$ARM_CLIENT_ID" --secret
          pulumi config set aadClientSecret "$ARM_CLIENT_SECRET" --secret  
          pulumi config set aadTenantId "$ARM_TENANT_ID"
          pulumi config set openaiApiKey "${{ secrets.OPENAI_API_KEY }}" --secret
          pulumi config set twilioAccountSid "${{ secrets.TWILIO_ACCOUNT_SID }}" --secret
          pulumi config set twilioAuthToken "${{ secrets.TWILIO_AUTH_TOKEN }}" --secret
          
          # Set image configurations (will be updated to actual values after state is fixed)
          pulumi config set workerImage "vextiracrdev.azurecr.io/lightning-worker:latest"
          pulumi config set conseilImage "vextiracrdev.azurecr.io/conseil-agent:latest"
          pulumi config set uiImage "vextiracrdev.azurecr.io/integrated-ui:latest"
          pulumi config set voiceWsImage "vextiracrdev.azurecr.io/voice-ws:latest"
          pulumi config set hubImage "vextiracrdev.azurecr.io/context-hub:latest"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: Export current state (backup)
        run: |
          cd infra
          pulumi stack export --file state-backup-$(date +%Y%m%d-%H%M%S).json
          echo "State backup created"
          
      - name: Run Pulumi state repair
        if: ${{ inputs.repair_method == 'state-repair' || inputs.repair_method == 'both' }}
        run: |
          cd infra
          echo "Running pulumi state repair..."
          pulumi state repair --yes || echo "State repair completed with warnings"
          
      - name: Refresh state with integrity checking disabled
        if: ${{ inputs.repair_method == 'disable-integrity-checking' || inputs.repair_method == 'both' }}
        run: |
          cd infra
          echo "Running pulumi refresh with --disable-integrity-checking..."
          pulumi refresh --yes --disable-integrity-checking
          
      - name: Preview changes
        run: |
          cd infra
          echo "Previewing changes after state fix..."
          pulumi preview --diff
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: Deploy with fixed state
        run: |
          cd infra
          echo "Deploying with fixed state..."
          
          # First attempt with disable-integrity-checking if needed
          if [[ "${{ inputs.repair_method }}" == "disable-integrity-checking" || "${{ inputs.repair_method }}" == "both" ]]; then
            pulumi up --yes --skip-preview --disable-integrity-checking || {
              echo "Deployment with --disable-integrity-checking failed, trying normal deployment..."
              pulumi up --yes --skip-preview
            }
          else
            pulumi up --yes --skip-preview
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: Validate deployment
        run: |
          cd infra
          echo "Validating deployment..."
          
          # Check stack outputs
          pulumi stack output --json
          
          # Log in to Azure and verify resources
          az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
          az account set --subscription $ARM_SUBSCRIPTION_ID
          
          # Check if key resources exist
          echo "Checking resource group..."
          az group show --name vextir-${{ inputs.stack }} || echo "Resource group not found"
          
          echo "Checking ACR..."
          az acr show --name vextiracrdev || echo "ACR not found"
          
          echo "Checking Container Apps Environment..."
          az containerapp env show --name vextir-env-${{ inputs.stack }} --resource-group vextir-${{ inputs.stack }} || echo "Container Apps Environment not found"
          
      - name: Upload state backup
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: pulumi-state-backup
          path: infra/state-backup-*.json
          retention-days: 7
          
      - name: Summary
        if: always()
        run: |
          echo "## Pulumi State Fix Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Stack**: ${{ inputs.stack }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repair Method**: ${{ inputs.repair_method }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the deployment validation output above" >> $GITHUB_STEP_SUMMARY
          echo "2. If successful, the regular deployment workflow should now work" >> $GITHUB_STEP_SUMMARY
          echo "3. State backup has been saved as an artifact" >> $GITHUB_STEP_SUMMARY